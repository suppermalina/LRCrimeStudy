separated_by_year$Description
separated_by_year <- data.frame(cbind(total_incidents$incidents_month, total_incidents$incidents_Description,
total_incidents$year))
head(separated_by_year)
names(separated_by_year) <- c("Month", "Description", "Year")
separated_by_year <- aggregate(separated_by_year$Description, by = list(separated_by_year$Month, separated_by_year$Year), FUN = length)
ggplot(separate_month_all, aes(x = Month, y = 'Total amount')) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_grid(years ~.)
ggplot(separated_by_year, aes(x = Month, y = 'Total amount')) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_grid(years ~.)
ggplot(separated_by_year, aes(x = Month, y = 'Total amount')) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_grid(year ~.)
names(separated_by_year) <- c("Month", "Description", "Year")
separated_by_year
names(separated_by_year) <- c("Month", "Year", "Description")
separated_by_year
ggplot(separated_by_year, aes(x = Month, y = 'Total amount')) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_grid(year ~.)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_grid(year ~.)
ggplot(separated_by_year, aes(x = Month, y = Description))
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_grid(year ~.)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_grid(~year)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~year)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~Year)
separated_by_year <- data.frame(cbind(total_incidents$incidents_month, total_incidents$incidents_Description,
total_incidents$year))
head(separated_by_year)
names(separated_by_year) <- c("Month", "Year", "Description")
separated_by_year <- separated_by_year[separated_by_year$Year >= 2015, ]
separated_by_year <- aggregate(separated_by_year$Description, by = list(separated_by_year$Month, separated_by_year$Year), FUN = length)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~Year)
tmp_ttl <- read.table("Crime_records_Of_LR_2015-2018.csv", head=TRUE, sep=",", fill=TRUE, stringsAsFactors=F)
for (i in 1 : length(tmp_ttl$incidents_wdays)) {
if (grepl("mon", tmp_ttl$incidents_wdays[i], ignore.case = TRUE)) {
tmp_ttl$incidents_wdays[i] <- "MONDAY"
}
if (grepl("tue", tmp_ttl$incidents_wdays[i], ignore.case = TRUE)) {
tmp_ttl$incidents_wdays[i] <- "TUESDAY"
}
if (grepl("wed", tmp_ttl$incidents_wdays[i], ignore.case = TRUE)) {
tmp_ttl$incidents_wdays[i] <- "WEDNESDAY"
}
if (grepl("thu", tmp_ttl$incidents_wdays[i], ignore.case = TRUE)) {
tmp_ttl$incidents_wdays[i] <- "THURSDAY"
}
if (grepl("fri", tmp_ttl$incidents_wdays[i], ignore.case = TRUE)) {
tmp_ttl$incidents_wdays[i] <- "FRIDAY"
}
if (grepl("sat", tmp_ttl$incidents_wdays[i], ignore.case = TRUE)) {
tmp_ttl$incidents_wdays[i] <- "SATURDAY"
}
if (grepl("sun", tmp_ttl$incidents_wdays[i], ignore.case = TRUE)) {
tmp_ttl$incidents_wdays[i] <- "SUNDAY"
}
}
tmp_ttl$incidents_wdays <- factor(tmp_ttl$incidents_wdays, levels = c("MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY",
"FRIDAY", "SATURDAY", "SUNDAY"))
for (i in 1 : length(tmp_ttl$incidents_month)) {
print(tmp_ttl$incidents_month[i])
if (tmp_ttl$incidents_month[i] == "1" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "JAN"
}
if (tmp_ttl$incidents_month[i] == "2" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "FEB"
}
if (tmp_ttl$incidents_month[i] == "3" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "MAR"
}
if (tmp_ttl$incidents_month[i] == "4" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "APR"
}
if (tmp_ttl$incidents_month[i] == "5" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "MAY"
}
if (tmp_ttl$incidents_month[i] == "6" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "JUN"
}
if (tmp_ttl$incidents_month[i] == "7" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "JUL"
}
if (tmp_ttl$incidents_month[i] == "8" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "AUG"
}
if (tmp_ttl$incidents_month[i] == "9" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "SEP"
}
if (tmp_ttl$incidents_month[i] == "10" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "OCT"
}
if (tmp_ttl$incidents_month[i] == "11" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "NOV"
}
if (tmp_ttl$incidents_month[i] == "12" & !is.na(tmp_ttl$incidents_month[i])) {
tmp_ttl$incidents_month[i] <- "DEC"
}
}
for (i in 1 : length(tmp_ttl$incidents_month)) {
print(tmp_ttl$incidents_month[i])
if (grepl("9", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "SEP"
}
if (grepl("jan", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "JAN"
}
if (grepl("feb", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "FEB"
}
if (grepl("mar", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "MAR"
}
if (grepl("apr", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "APR"
}
if (grepl("may", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "MAY"
}
if (grepl("jun", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "JUN"
}
if (grepl("jul", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "JUL"
}
if (grepl("aug", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "AUG"
}
if (grepl("Sep", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "SEP"
}
if (grepl("oct", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "OCT"
}
if (grepl("nov", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "NOV"
}
if (grepl("dec", tmp_ttl$incidents_month[i], ignore.case = TRUE)) {
tmp_ttl$incidents_month[i] <- "DEC"
}
}
tmp_ttl$incidents_month <- factor(tmp_ttl$incidents_month, levels = c("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL",
"AUG", "SEP", "OCT", "NOV", "DEC"))
class(tmp_ttl$incidents_wdays)
tmp_ttl$year <- year(tmp_ttl$incidents_ymd)
for (i in 1 : length(tmp_ttl$year)) {
if (!is.na(tmp_ttl$year[i]) & tmp_ttl$year[i] < 2015) {
print(tmp_ttl$year[i])
tmp_ttl <- tmp_ttl[-i, ]
}
}
for (i in 1 : length(tmp_ttl$year)) {
if (!is.na(tmp_ttl$year[i]) & tmp_ttl$year[i] > 2018) {
print(tmp_ttl$year[i])
tmp_ttl[-i, ]
tmp_ttl <- tmp_ttl[-i, ]
}
}
factor(tmp_ttl$year)
for (i in 1 : length(tmp_ttl$year)) {
if (!is.na(tmp_ttl$year[i]) & tmp_ttl$year[i] < 2015) {
print(tmp_ttl$year[i])
tmp_ttl <- tmp_ttl[-i, ]
}
}
factor(tmp_ttl$year)
for (i in 1 : length(tmp_ttl$year)) {
if (tmp_ttl$year[i] < 2015) {
print(tmp_ttl$year[i])
tmp_ttl <- tmp_ttl[-i, ]
}
}
for (i in 1 : length(tmp_ttl$year)) {
if (!is.na(tmp_ttl$year[i]) & tmp_ttl$year[i] < 2015) {
print(tmp_ttl$year[i])
tmp_ttl <- tmp_ttl[-i, ]
}
}
factor(tmp_ttl$year)
tmp_ttl$X.4 <- NULL
tmp_ttl$X.3 <- NULL
tmp_ttl$X.2 <- NULL
tmp_ttl$X.1 <- NULL
tmp_ttl$X <- NULL
factor(tmp_ttl$year)
write.csv(tmp_ttl, "Crime_records_Of_LR_2015-2018.csv")
setwd("/Users/mali/Documents/myGit/LRCrimeStudy")
#Loading the packages
library(plyr)
library(lubridate)
library(dplyr)
library(ggplot2)
#Loading data
# This script aims to study the crimes happened in LR.
# Data are downloaded from the police department of LR.
# The data set has following records:
# INCIDENT_DATA, data form: month/day/year hour_miutes_second AM/PM
# INCIDENT_NUMBER, data form: year-xxxxxx(six digits)
# LOCATION_DISTRICT, data form: two digits number
# OFFENS_CODE, data form: two digits with a uppercase letter
# OFFENS_DESCRIPTION: a string
# LOCATION_ADDRESS,CITY,STATE,ZIP
# LATITUDE,LONGITUDE
# Location: street name only
#Data set can be found on this webpage:
#https://data.littlerock.gov/Safe-City/Little-Rock-Police-Department-Statistics-2017-to-Y/bz82-34ep
#Peeking at the data set
#Here, the data.frame incidents contains data for 2017, 2018.
#We need this dataframe for analysising the distribution of crimes per hour in each week
incidents <- read.table("Little_Rock_Police_Department_Statistics_2017_to_Year_to_Date_2018.csv",
head=TRUE, sep=",", fill=TRUE, stringsAsFactors=F)
head(incidents)
attach(incidents)
str(incidents)
incidents$INCIDENT_DATE <- gsub("\\/", "\\-", incidents$INCIDENT_DATE)
incidents$ymd <- mdy_hms(incidents$INCIDENT_DATE)
incidents$month <- month(incidents$ymd, label = TRUE)
incidents$year <- year(incidents$ymd)
incidents$wday <- wday(incidents$ymd, label = TRUE)
incidents$hour <- hour(incidents$ymd)
#This dataframe contains all crime records from 2015-2018
total_incidents <- read.table("Crime_records_Of_LR_2015-2018.csv", head=TRUE, sep=",", fill=TRUE, stringsAsFactors=F)
#First, we hope to have a big picture of the crimes happened in the time range, more accurate,
#we want to see which types of crimes commited the most
#Thus, we will show the total count of each typ of crime with a barplot
incidentsSummary <- as.data.frame(total_incidents %>%
group_by(incidents_Description) %>%
summarise(offense_amount = n()) %>%
distinct())
attach(incidentsSummary)
colnames(incidentsSummary) <- c("offense_description", "offense_amount")
#The following codes are for the bar chart
p <- ggplot(incidentsSummary, aes(x = reorder(incidentsSummary$offense_description, desc(incidentsSummary$offense_amount)),
y = incidentsSummary$offense_amount))
p + geom_bar(stat = "identity", width = 0.8, fill = "red") +
coord_flip() +
labs(title = "CATAGORIED CRIME COUNT", x = "OFFENSE_DESCRIPTION", y = "OFFENSE_AMOUNT")
#The following codes aim to plot out the pie chart
pie <- ggplot(incidentsSummary, aes(x = "", y = incidentsSummary$offense_amount, fill = factor(incidentsSummary$offense_description)))
pie + geom_bar(width = 1, stat = "identity") +
theme(axis.line = element_blank(), plot.title = element_text(hjust = 0.5)) +
labs(fill = "OFFENSE_DESCRIPTION", x = NULL, y = NULL, title = "PIE OF TOP20",
caption = "Source:OFFENSE_DESCRIPTION") +
coord_polar(theta = "y", start = 0)
#Second, we hope to figuer out how the crimes distribute in each weekday, from 0:00 to 23:59
#For, this part, we will use a heatmap to show the relation. And, we will use all crime records
#setting colors
col1 = "#FEFEFE"
col2 = "#540404"
weekdayHour <- ddply(incidents, c("hour", "wday"), summarise, N = length(ymd))
weekdayHour$wday <- factor(weekdayHour$wday, levels=rev(levels(weekdayHour$wday)))
#creating the heatmap
ggplot(weekdayHour, aes(hour, wday)) + geom_tile(aes(fill = N),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = col1, high = col2) +
guides(fill=guide_legend(title="Total Incidents")) +
theme_bw() + theme_minimal() +
labs(title = "Heatmap of LR crimes by Hour of a day",
x = "Hour", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#Third, science the coordinations of all locations where incidents commited, we want to see
#them being marked on the map
library("dplyr")
library("forcats")
register_google(key = "AIzaSyAj3UsfYVSZOvDk8wD2Xo8pIqtiTq_bRhI", account_type = "premium", day_limit = 100000)
#Overall heatmap
geo_incidents <- ddply(total_incidents, c("OFFENSE_DESCRIPTION",
"LATITUDE", "LONGITUDE"), summarise, N = length(OFFENSE_DESCRIPTION))
geo_incidents$OFFENSE_DESCRIPTION <- factor(geo_incidents$OFFENSE_DESCRIPTION)
qmplot(LONGITUDE, LATITUDE, data = geo_incidents, maptype = "toner-lite", geom = "density2d", color = I("red"))
qmplot(LONGITUDE, LATITUDE, data = geo_incidents, geom = "blank",
zoom = 15, maptype = "toner-background", darken = .7, legend = "topleft"
) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Incidents\nFourwo Years", low = "white", mid = "yellow", high = "red", midpoint = 45)
#All the plots shown above only reveal us the distribution of crimes in the whole city.
#However, we have no idea with the internal factors which effect the distribution.
#At the very begining, we tried to figure out the correlation between the amount of incidents
#with space and time. But, we found this is helpless.
#We cannot study the trending in a specific area without defined a specific time. And, since
#the total amount of incidents in an area increasing with the time flows. So, we decide to see
#the relation between different types of crimes with the area in which the crimes happened.
#As well as the relation between the total amount of crimes happend in a specific weekday and
#areas
library(stringr)
incidents$dim <- str_sub(incidents$ymd, start = 6L, end = 10L)
#These 11 plots reveal the distribution of the 11 types of crimes in the city
qmplot(LONGITUDE, LATITUDE, data = geo_incidents, maptype = "toner-background", color = OFFENSE_DESCRIPTION) +
facet_wrap(~ OFFENSE_DESCRIPTION)
#Now, we hope to see the distribution
#of different types of crimes in a week as well as in a year. The heatmap is used.
crimesDay <- aggregate(total_incidents$incidents_Description,
by = list(total_incidents$incidents_Description, total_incidents$incidents_wdays), FUN = length)
names(crimesDay) <- c("crimeDescription", "weekday", "count")
class(crimesDay$weekday)
factor(crimesDay$weekday)
crimesDay$weekday <- factor(crimesDay$weekday)
crimesDay <- crimesDay[order(crimesDay$count, decreasing = TRUE), ]
ggplot(crimesDay, aes(crimeDescription, weekday)) + geom_tile(aes(fill = count),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = col1, high = col2) +
guides(fill=guide_legend(title="Total Incidents")) +
theme_bw() + theme_minimal() +
labs(title = "Heatmap of LR crime distribution per week",
x = "Crime description", y = "Day of Week") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5))
#The distribution of crimes in each month
monthly_crimes <- aggregate(total_incidents$incidents_Description,
by = list(total_incidents$incidents_Description, as.factor(total_incidents$incidents_month)), FUN = length)
names(monthly_crimes) <- c("crimeDescription", "month", "count")
monthly_crimes$month <- factor(monthly_crimes$month, levels = c("JAN", "FEB", "MAR", "APR",
"MAY", "JUN", "JUL", "AUG",
"SEP", "OCT", "NOV", "DEC"))
monthly_crimes <- monthly_crimes[order(monthly_crimes$count, decreasing = TRUE), ]
ggplot(monthly_crimes, aes(crimeDescription, month)) + geom_tile(aes(fill = count),colour = "white", na.rm = TRUE) +
scale_fill_gradient(low = col1, high = col2) +
guides(fill=guide_legend(title="Monthly Crimes")) +
theme_bw() + theme_minimal() +
labs(title = "Heatmap of LR crime distribution per month for the past four years",
x = "Crime description", y = "Month") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5))
#Now, we want to see the distribution of crimes in each moth, no matter which type of crimes
#Bar plot will be adopted
for (i in 1 : length(total_incidents$incidents_month)) {
if (grepl("Sep", total_incidents$incidents_month[i])) {
total_incidents$incidents_month[i] <- gsub("Sep", "SEP", total_incidents$incidents_month[i])
}
}
month_all <- aggregate(total_incidents$incidents_month, by = list(total_incidents$incidents_month), FUN = length)
names(month_all) <- c("Month", "Total amount")
month_all$Month <- factor(month_all$Month, levels = c("JAN", "FEB", "MAR", "APR",
"MAY", "JUN", "JUL", "AUG",
"SEP", "OCT", "NOV", "DEC"))
ggplot(month_all, aes(x = Month, y = `Total amount`), colo) +
geom_bar(stat = "identity", width = 0.8, fill = "red")
#Do this to four years separately
#total_incidents$year <- year(total_incidents$incidents_ymd)
#total_incidents$incidents_month <- factor(total_incidents$incidents_month, levels = c("JAN", "FEB", "MAR", "APR",
#                                                                      "MAY", "JUN", "JUL", "AUG",
#                                                                      "SEP", "OCT", "NOV", "DEC"))
#factor(total_incidents$year)
separated_by_year <- data.frame(cbind(total_incidents$incidents_month, total_incidents$incidents_Description,
total_incidents$year))
head(separated_by_year)
names(separated_by_year) <- c("Month", "Year", "Description")
separated_by_year <- separated_by_year[separated_by_year$Year >= 2015, ]
separated_by_year <- aggregate(separated_by_year$Description, by = list(separated_by_year$Month, separated_by_year$Year), FUN = length)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~Year)
separated_by_year
separated_by_year <- data.frame(cbind(total_incidents$incidents_month, total_incidents$incidents_Description,
total_incidents$year))
head(separated_by_year)
names(separated_by_year) <- c("Month", "Year", "Description")
separated_by_year <- separated_by_year[separated_by_year$Year >= 2015, ]
separated_by_year <- aggregate(separated_by_year$Description, by = list(separated_by_year$Month, separated_by_year$Year), FUN = length)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~Year)
separated_by_year
separated_by_year <- separated_by_year[separated_by_year$Year >= 2015, ]
separated_by_year <- data.frame(cbind(total_incidents$incidents_month, total_incidents$incidents_Description,
total_incidents$year))
head(separated_by_year)
names(separated_by_year) <- c("Month", "Description", "Year")
separated_by_year <- aggregate(separated_by_year$Description, by = list(separated_by_year$Month, separated_by_year$Year), FUN = length)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~Year)
separated_by_year
names(separated_by_year) <- c("Month", "Year", "Amount")
separated_by_year <- aggregate(separated_by_year$Description, by = list(separated_by_year$Month, separated_by_year$Year), FUN = length)
separated_by_year <- aggregate(separated_by_year$Amount, by = list(separated_by_year$Month, separated_by_year$Year), FUN = length)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~Year)
separated_by_year
separated_by_year <- data.frame(cbind(total_incidents$incidents_month, total_incidents$incidents_Description,
total_incidents$year))
head(separated_by_year)
names(separated_by_year) <- c("Month", "Year", "Amount")
names(separated_by_year) <- c("Month", "Description", "Year")
separated_by_year <- aggregate(separated_by_year$Description, by = list(separated_by_year$Month, separated_by_year$Year), FUN = length)
ggplot(separated_by_year, aes(x = Month, y = Description)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~Year)
separated_by_year
names(separated_by_year) <- c("Month", "Year", "Amount")
ggplot(separated_by_year, aes(x = Month, y = Amount)) +
geom_bar(stat = "identity", width = 0.8, fill = "red") +
facet_wrap(~Year)
total_incidents
total_incidents$incidents_ymd
total_incidents$location <- sqrt((as.numeric(total_incidents$incidents_Lat)^2 +
(as.numeric(total_incidents$incidents_Lon))^2))
total_incidents$locatio
tmp <- data.frame(total_incidents$incidents_Description, total_incidents$location, total_incidents$incidents_wdays)
corr <- cor(tmp$total_incidents.location, tmp$total_incidents.incidents_wdays)
install.packages("psych")
library (psych)
pairs.panels(total_incidents[c("incidents_Lat", "incidents_Lon", "incidents_wdays", "incidents_month")])
pairs.panels(total_incidents[c("total_incidents$location", "incidents_wdays", "incidents_month")])
pairs.panels(total_incidents[c("location", "incidents_wdays", "incidents_month")])
pairs.panels(total_incidents[c("location", "incidents_District", "incidents_month")])
pairs.panels(incidents[c("LOCATION_DISTRICT", "LONGITUDE", "LATITUDE", "hour", "month")])
pairs.panels(total_incidents[c("incidents_Lat", "incidents_Lon", "incidents_District", "incidents_month")])
temp <- read.table("temp.csv", head=TRUE, sep=",", fill=TRUE, stringsAsFactors=F)
temp
temp <- read.table("temparature.csv", head=TRUE, sep=",", fill=TRUE, stringsAsFactors=F)
temp
temp <- temp[-1, ]
temp
colnames(temp) <- c("date", "max", "min")
colnames(temp) <- c("ymd", "max", "min")
temp$ymd <- ymd(temp$ymd)
temp$ymd
climate <- read.table("climate.csv", head=TRUE, sep=",", fill=TRUE, stringsAsFactors=F)
head(climate)
head(climate)
climate <- read.table("climate.csv", head=TRUE, sep=",", fill=TRUE, stringsAsFactors=F)
head(climate)
daily_climate <- data.frame(climate$DATE, climate$LATITUDE,
climate$LONGITUDE, climate$DAILYMaximumDryBulbTemp, climate$DAILYMinimumDryBulbTemp)
monthly_climate <- data.frame(climate$DATE, climate$LATITUDE,
climate$LONGITUDE, climate$MonthlyMaximumTemp, climate$MonthlyMeanTemp, climate$MonthlyMeanTemp)
daily_climate
colnames(daily_climate) <- c("date", "lon", "lat", "dailyMax", "dailyMin")
colnames(daily_climate) <- c("date", "lon", "lat", "dailyMax", "dailyMin")
colnames(monthly_climate) <- c("date", "lon", "lat", "monthlyMax", "monthlyMean", "monthlyMax")
daily_climate
daily_climate <- daily_climate[!is.na(daily_climate$dailyMax), ]
daily_climate
daily_climate
daily_climate <- daily_climate[!is.na(daily_climate$dailyMin), ]
daily_climate
for (i in 1 : length(daily_climate$date)) {
if (grepl(" ", daily_climate$date[i])) {
daily_climate$date[i] <- gsub(" .*", "", daily_climate[i])
daily_climate$date[i] <- gsub("\\/", "\\-", daily_climate[i])
daily_climate$date[i] <- ymd(daily_climate$date[i])
}
}
length(daily_climate$date
length(daily_climate$date)
daily_climate <- data.frame(climate$DATE, climate$LATITUDE,
climate$LONGITUDE, climate$DAILYMaximumDryBulbTemp, climate$DAILYMinimumDryBulbTemp)
monthly_climate <- data.frame(climate$DATE, climate$LATITUDE,
climate$LONGITUDE, climate$MonthlyMaximumTemp, climate$MonthlyMeanTemp, climate$MonthlyMeanTemp)
colnames(daily_climate) <- c("date", "lon", "lat", "dailyMax", "dailyMin")
colnames(monthly_climate) <- c("date", "lon", "lat", "monthlyMax", "monthlyMean", "monthlyMax")
daily_climate <- daily_climate[!is.na(daily_climate$dailyMax), ]
daily_climate <- daily_climate[!is.na(daily_climate$dailyMin), ]
length(daily_climate$date)
daily_climate$date)
length(daily_climate$date)
class(length(daily_climate$date))
for (i in 1 : length(daily_climate$date)) {
if (grepl(" ", daily_climate$date[i])) {
daily_climate$date[i] <- gsub(" .*", "", daily_climate[i])
daily_climate$date[i] <- gsub("\\/", "\\-", daily_climate[i])
daily_climate$date[i] <- ymd(daily_climate$date[i])
}
}
daily_climate <- data.frame(climate$DATE, climate$LATITUDE,
climate$LONGITUDE, climate$DAILYMaximumDryBulbTemp, climate$DAILYMinimumDryBulbTemp)
monthly_climate <- data.frame(climate$DATE, climate$LATITUDE,
climate$LONGITUDE, climate$MonthlyMaximumTemp, climate$MonthlyMeanTemp, climate$MonthlyMeanTemp)
colnames(daily_climate) <- c("date", "lon", "lat", "dailyMax", "dailyMin")
colnames(monthly_climate) <- c("date", "lon", "lat", "monthlyMax", "monthlyMean", "monthlyMax")
#removing na
daily_climate <- daily_climate[!is.na(daily_climate$dailyMax), ]
daily_climate <- daily_climate[!is.na(daily_climate$dailyMin), ]
class(length(daily_climate$date))
for (i in 1 : length(daily_climate$date)) {
if (grepl(" ", daily_climate$date[i])) {
daily_climate$date[i] <- gsub(" .*", "", daily_climate[i])
#daily_climate$date[i] <- gsub("\\/", "\\-", daily_climate[i])
#daily_climate$date[i] <- ymd(daily_climate$date[i])
}
daily_climate <- data.frame(climate$DATE, climate$LATITUDE,
climate$LONGITUDE, climate$DAILYMaximumDryBulbTemp, climate$DAILYMinimumDryBulbTemp)
monthly_climate <- data.frame(climate$DATE, climate$LATITUDE,
climate$LONGITUDE, climate$MonthlyMaximumTemp, climate$MonthlyMeanTemp, climate$MonthlyMeanTemp)
colnames(daily_climate) <- c("date", "lon", "lat", "dailyMax", "dailyMin")
colnames(monthly_climate) <- c("date", "lon", "lat", "monthlyMax", "monthlyMean", "monthlyMax")
#removing na
daily_climate <- daily_climate[!is.na(daily_climate$dailyMax), ]
daily_climate <- daily_climate[!is.na(daily_climate$dailyMin), ]
class(length(daily_climate$date))
for (i in 1 : length(daily_climate$date)) {
if (grepl(" ", daily_climate$date[i])) {
daily_climate$date[i] <- gsub(" .*", "", daily_climate[i])
#daily_climate$date[i] <- gsub("\\/", "\\-", daily_climate[i])
#daily_climate$date[i] <- ymd(daily_climate$date[i])
}
}
